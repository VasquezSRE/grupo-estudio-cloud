# .github/workflows/deploy-students-community.yml
name: Deploy Students Community Day

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'aws-cloud-club-udea/students-community-day/**'
      - '.github/workflows/deploy-students-community.yml'

env:
  # Configuraciones globales
  AWS_REGION: us-east-1
  SOURCE_DIR: aws-cloud-club-udea/students-community-day
  S3_BUCKET: ${{ secrets.S3_BUCKET_NAME }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check project structure
        run: |
          echo "üîç Checking project structure..."
          if [ ! -d "${{ env.SOURCE_DIR }}" ]; then
            echo "‚ùå Directory ${{ env.SOURCE_DIR }} not found"
            exit 1
          fi
          
          echo "‚úÖ Project directory found"
          echo "üìÅ Contents:"
          ls -la "${{ env.SOURCE_DIR }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          # Remover cache para evitar errores

      - name: Install dependencies
        run: |
          cd "${{ env.SOURCE_DIR }}"
          
          echo "üì¶ Installing Astro dependencies..."
          
          if [ -f "package-lock.json" ]; then
            echo "üîí Using npm ci (with package-lock.json)..."
            npm ci
          elif [ -f "yarn.lock" ]; then
            echo "üß∂ Using yarn (with yarn.lock)..."
            yarn install --frozen-lockfile
          elif [ -f "package.json" ]; then
            echo "üì¶ Using npm install (package.json only)..."
            npm install
          else
            echo "‚ùå No package.json found!"
            exit 1
          fi
          
          echo "‚úÖ Dependencies installed successfully"

      - name: Build Astro project
        run: |
          cd "${{ env.SOURCE_DIR }}"
          echo "üèóÔ∏è Building Astro project..."
          
          # Verificar que el script build existe
          if npm run | grep -q "build"; then
            npm run build
          else
            echo "‚ùå No build script found in package.json"
            echo "Available scripts:"
            npm run
            exit 1
          fi
          
          echo "‚úÖ Build completed"
          echo "üìÅ Build output:"
          ls -la dist/
        env:
          NODE_ENV: production

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3 with optimized caching
        run: |
          cd "${{ env.SOURCE_DIR }}"
          
          echo "üöÄ Starting S3 deployment..."
          echo "üìÅ Deploying from: dist/"
          echo "ü™£ Target bucket: ${{ env.S3_BUCKET }}"
          
          # 1. HTML files - No cache (always fresh)
          echo "üìÑ Uploading HTML files..."
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --delete \
            --cache-control "public, max-age=0, must-revalidate" \
            --exclude "*" \
            --include "*.html"
          
          # 2. Astro assets - Long cache (1 year)
          echo "üé® Uploading Astro static assets..."
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*" \
            --include "_astro/*.css" \
            --include "_astro/*.js" \
            --include "_astro/*.mjs"
          
          # 3. Fonts - Long cache
          echo "üî§ Uploading fonts..."
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*" \
            --include "*.woff" \
            --include "*.woff2" \
            --include "*.ttf" \
            --include "*.otf"
          
          # 4. Images - Long cache
          echo "üì∏ Uploading images..."
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --cache-control "public, max-age=31536000" \
            --exclude "*" \
            --include "*.svg" \
            --include "*.png" \
            --include "*.jpg" \
            --include "*.jpeg" \
            --include "*.webp" \
            --include "*.gif" \
            --include "*.ico"
          
          # 5. Other files - Medium cache
          echo "üìã Uploading other files..."
          aws s3 sync dist/ s3://${{ env.S3_BUCKET }} \
            --cache-control "public, max-age=86400" \
            --exclude "*" \
            --include "*.json" \
            --include "*.xml" \
            --include "*.txt" \
            --include "*.pdf"
          
          echo "‚úÖ All files deployed to S3 successfully!"

      - name: Invalidate CloudFront
        run: |
          echo "üîÑ Creating CloudFront invalidation..."
          
          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)
          
          echo "‚è≥ Invalidation ID: $INVALIDATION_ID"
          echo "üåê CloudFront will update in a few minutes"

      - name: Deployment Summary
        run: |
          CLOUDFRONT_URL=$(aws cloudfront get-distribution \
            --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --query 'Distribution.DomainName' \
            --output text)
          
          echo ""
          echo "üéâ Students Community Day deployment completed!"
          echo ""
          echo "üìä Deployment Summary:"
          echo "‚îú‚îÄ‚îÄ üöÄ Framework: Astro"
          echo "‚îú‚îÄ‚îÄ üìÅ Source: ${{ env.SOURCE_DIR }}"
          echo "‚îú‚îÄ‚îÄ ü™£ S3 Bucket: ${{ env.S3_BUCKET }}"
          echo "‚îú‚îÄ‚îÄ üîó CloudFront: ${{ env.CLOUDFRONT_DISTRIBUTION_ID }}"
          echo "‚îî‚îÄ‚îÄ üåê Live URL: https://$CLOUDFRONT_URL"
          echo ""
          echo "Your site is now live! üöÄ"

  # Verificaci√≥n opcional
  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Test deployment
        run: |
          echo "‚è≥ Waiting 30 seconds for CloudFront..."
          sleep 30
          
          CLOUDFRONT_URL=$(aws cloudfront get-distribution \
            --id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
            --query 'Distribution.DomainName' \
            --output text)
          
          echo "üîç Testing: https://$CLOUDFRONT_URL"
          
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://$CLOUDFRONT_URL" || echo "000")
          
          case $HTTP_STATUS in
            200)
              echo "‚úÖ Site is live and responding perfectly!"
              ;;
            403|404)
              echo "‚ö†Ô∏è Site returned $HTTP_STATUS - CloudFront may still be updating"
              ;;
            000)
              echo "‚ö†Ô∏è Could not connect - CloudFront may still be updating"
              ;;
            *)
              echo "‚ö†Ô∏è Site returned HTTP $HTTP_STATUS"
              ;;
          esac